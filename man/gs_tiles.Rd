% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_tiles.R
\name{gs_tiles}
\alias{gs_tiles}
\title{Create a regular tiling geometry}
\usage{
gs_tiles(anchor = NULL, window = NULL, width = NULL, offset = 0.5,
  pattern = "squared", rotation = 0, centroids = FALSE)
}
\arguments{
\item{anchor}{[\code{data.frame(1)}]\cr Object to derive the \code{geom}
from. It must include column names \code{x}, \code{y} and optinal variables
such as \code{fid}; see Examples.}

\item{window}{[\code{data.frame(1)}]\cr the origin (lower left corner) and
the maximum value (upper right corner) of the tiling.}

\item{width}{[\code{numeric(1)}]\cr the width of a tile.}

\item{offset}{[\code{numeric(1)}]\cr fraction of \code{width}, by which the
tiles will be offset. Can go from \code{-1} to \code{+1}.}

\item{pattern}{[\code{character(1)}]\cr pattern of the tiling. Possible
options are \code{"squared"} (default) or \code{"hexagonal"}.}

\item{rotation}{[\code{integerish(1)}]\cr}

\item{centroids}{[\code{logical(1)}]\cr should the centroids of the tiling be
returned (\code{TRUE}) or should the tiling be returned (\code{FALSE},
default)?}
}
\value{
An invisible \code{geom}.
}
\description{
Create a regular tiling geometry
}
\details{
When deriving a regular tiling for a prescribed window, there is
  only a limited set of legal combinations of cells in x and y dimension. For
  instance, a window of 100 by 100 can't comprise 10 by 5 squares of
  side-length 10, because then the y-dimension wouldn't be fully covered. The
  same is true for hexagonal and triangular tilings. In case it is only
  properly clear how many tiles there should be in one dimension, but not the
  other, this can be specified by setting one of the cell counts to
  \code{NA}, such as \code{cells = c(NA, 18)}.
}
\examples{
# create a squared tiling
aWindow <- data.frame(x = c(-180, 180),
                      y = c(-60, 80))
tiles <- gs_tiles(window = aWindow, width = 10)

# create a hexagonal tiling for a geom
coords <- data.frame(x = c(40, 70, 70, 50),
                     y = c(40, 40, 60, 70))
window <- data.frame(x = c(0, 80),
                     y = c(0, 80))
aGeom <- gs_polygon(anchor = coords, window = window)
comb <- gs_tiles(anchor = aGeom, width = 8, pattern = "hexagonal", rotation = 41)
}
\seealso{
Other tilings: \code{\link{gs_voronoi}}
}
\concept{tilings}
