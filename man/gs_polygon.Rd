% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_polygon.R
\name{gs_polygon}
\alias{gs_polygon}
\alias{gs_triangle}
\alias{gs_square}
\alias{gs_rectangle}
\alias{gs_hexagon}
\title{Create a polygon geometry}
\usage{
gs_polygon(anchor = NULL, window = NULL, features = 1,
  vertices = NULL, sketch = NULL, regular = FALSE, fixed = TRUE,
  ...)

gs_triangle(anchor = NULL, window = NULL, sketch = NULL,
  features = 1, fixed = FALSE, ...)

gs_square(anchor = NULL, window = NULL, sketch = NULL,
  features = 1, fixed = FALSE, ...)

gs_rectangle(anchor = NULL, window = NULL, sketch = NULL,
  features = 1, ...)

gs_hexagon(anchor = NULL, window = NULL, sketch = NULL,
  features = 1, fixed = FALSE, ...)
}
\arguments{
\item{anchor}{[\code{data.frame(1)}]\cr Object to derive the \code{geom}
from. It must include column names \code{x}, \code{y} and optinal variables
such as \code{fid}; see Examples.}

\item{window}{[\code{data.frame(1)}]\cr in case the reference window deviates
from the bounding box of \code{anchor} (minimum and maximum values),
specify this here.}

\item{features}{[\code{integerish(1)}]\cr number of geometries to create.}

\item{vertices}{[\code{integerish(.)}]\cr number of vertices per geometry;
will be recycled if it does not have as many elements as specified in
\code{features}.}

\item{sketch}{[\code{RasterLayer(1)}|\code{matrix(1)}]\cr Gridded object that
serves as template to sketch the geometry.}

\item{regular}{[\code{logical(1)}]\cr should the polygon be regular, i.e.
point symmetric (\code{TRUE}) or should the vertices be selected according
to \code{anchor} or \code{vertices} (\code{FALSE}, default)?}

\item{fixed}{[\code{logical(1)}]\cr should the polygon be aligned vertically
(\code{TRUE}, default), or should it be aligned according to the second
click (\code{FALSE}); only relevant if \code{regular = TRUE}.}

\item{...}{[various]\cr additional arguments; see Details.}
}
\value{
An invisible \code{geom}.
}
\description{
Create any (regular) polygon geometry (of class \code{\link{geom}}) either by
specifying anchor values or by sketching it.
}
\details{
The arguments \code{anchor} and \code{sketch} indicate how the
  geometry is created: \itemize{ \item \code{anchor}: if set, the geometry is
  created parametrically, the input provided is used to parameterise the
  geometry \itemize{ \item if \code{regular = FALSE} the resulting geometry
  is the boundary per feature, \item if \code{regular = TRUE}, only the first
  two vertices are considered, as center and indicating the (outer) radius.}
  \item \code{sketch}: if set, the geometry is created interactively, by
  clicking into the plot.}

  Possible additional arguments are: \itemize{ \item verbose = TRUE/FALSE
  \item graphical parameters to \code{\link{gt_locate}}, in case points are
  sketched; see \code{\link{gpar}}}.
}
\section{Functions}{
\itemize{
\item \code{gs_triangle}: wrapper of gs_polygon where \code{vertices = 3} and
\code{regular = TRUE}.

\item \code{gs_square}: wrapper of gs_polygon where \code{vertices = 4} and
\code{regular = TRUE}.

\item \code{gs_rectangle}: wrapper of gs_polygon where \code{vertices = 2},
\code{regular = FALSE} and the two complementing corners are derived from
the two given opposing corners.

\item \code{gs_hexagon}: wrapper of gs_polygon where \code{vertices = 6} and
\code{regular = TRUE}.
}}

\examples{
library(magrittr)

# create a polygon programmatically
coords <- data.frame(x = c(40, 70, 70, 50),
                     y = c(40, 40, 60, 70))
window <- data.frame(x = c(0, 80),
                     y = c(0, 80))

# if no window is set, the bounding box (i.e. min/max values) will be set as window
(aGeom <- gs_polygon(anchor = coords))

# the vertices are plottet relative to the window
visualise(geom = gs_polygon(anchor = coords,
                            vertices = 6, regular = TRUE))
gs_triangle(anchor = coords, window = window) \%>\%
  visualise(geom = ., linecol = "green", new = FALSE)

# when a geom is used in 'anchor', its properties (e.g. 'window') are passed on
aGeom <- setWindow(x = aGeom, to = window)
gs_polygon(anchor = aGeom) \%>\%
  visualise(geom = ., fillcol = "deeppink")
gs_rectangle(anchor = aGeom) \%>\%
  visualise(geom = ., new = FALSE)

\dontrun{

gs_hexagon(sketch = gtRasters$continuous, fixed = TRUE) \%>\%
  visualise(geom = ., linecol = "deeppink", linetype = 2, new = FALSE)
}
}
\seealso{
Other geometry shapes: \code{\link{gs_line}},
  \code{\link{gs_point}}
}
\concept{geometry shapes}
