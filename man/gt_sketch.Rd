% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gt_sketch.R
\name{gt_sketch}
\alias{gt_sketch}
\title{Sketch geometries}
\usage{
gt_sketch(template = NULL, shape = NULL, features = 1,
  vertices = NULL, regular = FALSE, fixed = TRUE, ...)
}
\arguments{
\item{template}{[\code{RasterLayer(1)} | \code{matrix(1)}]\cr Gridded object
that serves as template to sketch the geometry.}

\item{shape}{[\code{character(1)}]\cr a geometry shape that should be
sketched, possible are the geom types \code{"point"}, \code{"line"} and
\code{"polygon"} and special cases thereof (recently implemented are
\code{"triangle"}, \code{"rectangle"}, \code{"square"}, \code{"hexagon"})
and \code{"random"}.}

\item{features}{[\code{integerish(1)}]\cr number of geometries to create.}

\item{vertices}{[\code{integerish(.)}]\cr number of vertices per geometry;
will be recycled if it does not have as many elements as specified in
\code{features}.}

\item{regular}{[\code{logical(1)}]\cr if a polygon is sketched, should it be
regular, i.e. point symmetric (\code{TRUE}) with the number of corners
defined by \code{vertices} or should the vertices be selected according to
the click locations, resulting in a non-regular polygon (\code{FALSE},
default)?}

\item{fixed}{[\code{logical(1)}]\cr if a regular polygon is sketched, should
it be aligned vertically (\code{TRUE}, default), or should it be aligned
according to the second click (\code{FALSE}); only relevant if
\code{regular = TRUE}.}

\item{...}{[various]\cr additional arguments to \code{\link{gt_locate}}.}
}
\value{
An invisible \code{geom}.
}
\description{
Sketch geometries
}
\details{
bla
}
\examples{

\dontrun{

input <- gtRasters$continuous

# create a square interactively
squareGeom <- gs_square(sketch = input) \%>\%
visualise(geom = squareGeom, linecol = "orange", new = FALSE)

# ... or an approximate circle (actually a hectogon)
circleGeom <- gs_polygon(template = input, vertices = 100, regular = TRUE) \%>\%
  visualise(geom = ., linecol = "deeppink", new = FALSE)

# create two arbitrary polygons interactively
polyGeom <- gs_polygon(template = input, features = 2, vertices = c(4, 6)) \%>\%
  visualise(geom = ., linecol = "green", linewidth = 1, linetype = "dashed", new = FALSE)
}

\dontrun{

input <- gtRasters$continuous

# create points interactively
myLine <- gs_line(template = input, vertices = 5)
visualise(geom = myLine, linecol = "deeppink", new = FALSE)

anExtent <- gs_rectangle(myLine)
visualise(geom = anExtent, linecol = "green", new = FALSE)
}

\dontrun{

input <- gtRasters$continuous

# create points interactively
myPoints <- gs_point(template = input, vertices = 5)
visualise(geom = myPoints, linecol = "deeppink", new = FALSE)

anExtent <- gs_rectangle(myPoints)
visualise(geom = anExtent, linecol = "green", new = FALSE)
}
}
\seealso{
Other geometry tools: \code{\link{gt_rotate}},
  \code{\link{gt_scale}}, \code{\link{gt_skew}},
  \code{\link{gt_stretch}}
}
\concept{geometry tools}
